plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'maven-publish'
//	id 'org.jetbrains.kotlin.jvm' version('1.8.0-RC')
}


version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven {
		name = 'TerraformersMC'
		url = 'https://maven.terraformersmc.com/'
	}
	maven { url "https://maven.shedaniel.me" }
	repositories {
		maven { url "https://maven.kikugie.dev/releases"}
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"


	modImplementation "com.terraformersmc.terraform-api:terraform-wood-api-v1:7.0.1"
	include "com.terraformersmc.terraform-api:terraform-wood-api-v1:7.0.1"

	modApi "com.terraformersmc:modmenu:7.2.2"

	modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:12.0.648"


	modApi("me.shedaniel.cloth:cloth-config-fabric:11.1.118") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	modImplementation(modImplementation "dev.kikugie:crash-pipe:0.1.0")

//	modCompileOnly files("run/mods/naturespirit-1.4.5-1.20.1.jar")
//	modImplementation files("run/mods/TerraBlender-fabric-1.20.1-3.0.1.6.jar")

//	modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:12.0.648"
	// Uncomment the      following line to enable the deprecated Fabric API modules.
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"
}

//kotlin {
//	jvmToolchain {
//		languageVersion.set(JavaLanguageVersion.of(17))
//	}
//
//	jvmToolchain(17)
//}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}

loom {

	// ... (Whatever exists here)

	runs {
		// This adds a new gradle task that runs the datagen API: "gradlew runDatagen"
		datagen {

			inherit client
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=${modid}"

			runDir "build/datagen"
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}